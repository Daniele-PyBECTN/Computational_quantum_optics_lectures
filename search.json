[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Numerical Methods for Quantum Optics and Open Quantum Systems",
    "section": "",
    "text": "Numerical Methods for Quantum Optics and Open Quantum Systems is a hands-on course that shows you how to model and simulate open quantum systems in quantum optics with Python and QuTiP. The notes mix concise explanations, essential equations, and runnable code cells that work both on your computer and in Google Colab. Everything lives in a Quarto project on GitHub and is published in HTML and PDF for easy reading and collaboration. By the end, you will be able to set up and explore standard problems—such as photon cavities, two-level atoms, and open-system dynamics—using tools you can reuse in research and projects.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Home Page</span>"
    ]
  },
  {
    "objectID": "lecture1/introduction.html",
    "href": "lecture1/introduction.html",
    "title": "2  Introduction",
    "section": "",
    "text": "2.1 Why simulate open quantum systems?\nThe experimental frontier of quantum optics increasingly targets systems that cannot be described by perfectly isolated, unitary dynamics. Photons leak from cavities, solid‑state qubits couple to phonons, and measurement back‑action reshapes quantum states in real time. In these scenarios the open character of the system—the interplay between coherent evolution and irreversible processes—becomes the defining feature, not a perturbation. Analytical solutions exist only for a handful of toy models; to design devices, interpret data, and test conceptual ideas we therefore rely on numerical simulation of open quantum dynamics.\nNumerical methods allow us to:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "lecture1/introduction.html#why-simulate-open-quantum-systems",
    "href": "lecture1/introduction.html#why-simulate-open-quantum-systems",
    "title": "2  Introduction",
    "section": "",
    "text": "Predict observables such as spectra, correlation functions, or entanglement measures before running an experiment.\nPrototype control protocols (e.g., pulse shaping or feedback) that can stabilize fragile quantum states.\nExplore parameter regimes that are inaccessible analytically, revealing new phenomena like dissipative phase transitions or non‑Markovian memory effects.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "lecture1/introduction.html#why-python",
    "href": "lecture1/introduction.html#why-python",
    "title": "2  Introduction",
    "section": "2.2 Why Python?",
    "text": "2.2 Why Python?\nPython is not the fastest language for floating‑point arithmetic—compiled languages like C or Fortran still win raw speed benchmarks—but it has become the lingua franca of modern scientific computing. Three qualities make it particularly compelling for our purposes:\n\nExpressiveness – A succinct, readable syntax lowers cognitive overhead and lets us translate mathematical ideas into code quickly.\nRich ecosystem – Numpy, SciPy, Jupyter, Matplotlib, and data‑analysis libraries coexist seamlessly, providing everything from linear algebra kernels to publication‑quality plots.\nCommunity & portability – Tutorials, StackOverflow answers, CI pipelines, and cloud platforms such as Google Colab enable beginners to run the same notebooks locally or on GPUs in the cloud with negligible setup.\n\nMost importantly, Python hosts QuTiP (Quantum Toolbox in Python)(Johansson, Nation, and Nori 2012; Lambert et al. 2024) the de‑facto standard library for simulating open quantum systems. QuTiP wraps efficient C and Fortran back‑ends behind a high‑level interface: you manipulate Qobj instances instead of raw matrices, and you call solvers such as mesolve or mcsolve for Lindblad‑master equations and quantum trajectory simulations, respectively. The package is actively maintained, well documented, and battle‑tested across thousands of research papers.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "lecture1/introduction.html#how-does-python-differ-from-other-mainstream-languages",
    "href": "lecture1/introduction.html#how-does-python-differ-from-other-mainstream-languages",
    "title": "2  Introduction",
    "section": "2.3 How does Python differ from other mainstream languages?",
    "text": "2.3 How does Python differ from other mainstream languages?\n\n\n\n\n\n\n\n\n\nLanguage\nParadigm\nTypical strength\nTypical weakness\n\n\n\n\nC / C++\nCompiled, low‑level\nMaximal performance, fine‑grained memory control\nVerbose, higher barrier to entry, manual parallelization\n\n\nFortran\nCompiled, array‑oriented\nLegacy HPC codes, excellent BLAS/LAPACK bindings\nLimited modern features, smaller community\n\n\nMATLAB\nProprietary, array‑oriented\nIntegrated IDE, built‑in plotting, domain‑specific toolboxes\nLicense cost, closed ecosystem\n\n\nPython\nInterpreted, multi‑paradigm\nReadability, vast open‑source libraries, rapid prototyping\nOverhead of interpreter, GIL limits naive multithreading\n\n\n\nPython balances high‑level productivity with the option to call compiled extensions (via Cython, Numba, or Rust bindings) whenever performance matters.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "lecture1/introduction.html#a-glance-at-julia-and-quantumtoolbox.jl",
    "href": "lecture1/introduction.html#a-glance-at-julia-and-quantumtoolbox.jl",
    "title": "2  Introduction",
    "section": "2.4 A glance at Julia and QuantumToolbox.jl",
    "text": "2.4 A glance at Julia and QuantumToolbox.jl\nWhile Python dominates current scientific computing, it is not the only contender. In recent years, researchers and engineers have been exploring the need for a new programming language—one that combines the performance of compiled languages like C or Fortran with the ease of use and readability of scripting languages like Python or MATLAB. This is the motivation behind Julia.\nJulia promises “C‑like speed with Python‑like syntax” by using just‑in‑time (JIT) compilation and a multiple‑dispatch programming model. Within this language, the package QuantumToolbox.jl(Mercurio et al. 2025) has emerged as a high‑performance analog to QuTiP. It mirrors QuTiP’s API but benefits from Julia’s performance model and native automatic differentiation. Benchmarks already demonstrate significant speed‑ups, especially for large Hilbert spaces and GPU‑accelerated workloads.\nNevertheless, Julia’s ecosystem is still maturing. Its tooling, package stability, and IDE support are evolving rapidly but are not yet as robust as Python’s. Similarly, QuantumToolbox.jl, while powerful, has a smaller user base and fewer educational resources compared to QuTiP. For a course focused on accessibility and broad applicability, we therefore choose to prioritize Python and QuTiP as the more mature and stable learning platform.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "lecture1/introduction.html#course-scope",
    "href": "lecture1/introduction.html#course-scope",
    "title": "2  Introduction",
    "section": "2.5 Course scope",
    "text": "2.5 Course scope\nIn this course we therefore focus on Python + QuTiP. You will learn to:\n\nBuild Hamiltonians and collapse operators in a composable way.\nIntegrate master equations and unravel them into quantum trajectories.\nCompute expectation values, spectra, and correlation functions.\nCouple simulations to optimisation or machine‑learning workflows within the wider Python ecosystem.\n\nWhere Julia can offer useful perspective we will point out parallels, but all hands‑on examples will run in Python notebooks that you can execute locally or on Colab.\n\nTake‑away: Numerical simulation is the microscope of modern quantum optics. Python and QuTiP give us a practical, accessible, and well‑supported platform for that microscope—letting us peer into the dynamics of open quantum systems without getting lost in low‑level details.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "lecture1/introduction.html#first-steps-in-python-lists-loops-and-functions",
    "href": "lecture1/introduction.html#first-steps-in-python-lists-loops-and-functions",
    "title": "2  Introduction",
    "section": "2.6 First steps in Python: lists, loops, and functions",
    "text": "2.6 First steps in Python: lists, loops, and functions\n\n2.6.1 Creating and using lists\nBefore diving into numerical simulations, it’s useful to get acquainted with the basic syntax and features of Python. One of the simplest and most commonly used data structures is the list, which stores a sequence of elements. Lists are flexible—they can contain numbers, strings, or even other lists.\nHere’s how to create and access elements in a list:\n\n\nfruits = ['apple', 'banana', 'cherry']\nprint(f'First fruit: {fruits[0]}')\n\nFirst fruit: apple\n\n\n\n\n\n2.6.2 For loops\nA for loop allows us to iterate through each item in a collection and execute the same block of code for every element. You will use loops constantly—whether you are sweeping parameter values, accumulating results, or analysing datasets—so it is worth seeing the syntax early.\n\n\nfor fruit in fruits:\n    print(f'I like {fruit}')\n\nI like apple\nI like banana\nI like cherry\n\n\n\n\n\n2.6.3 Defining functions\nFunctions bundle reusable logic behind a descriptive name. In quantum‑optics simulations, well‑structured functions help keep notebooks tidy—for instance, collecting the code that builds a Hamiltonian or evaluates an observable in one place. Below is a minimal example that squares a number.\n\n\ndef square(x):\n    return x * x\n\nprint(square(5))\n\n25\n\n\n\n\n\n2.6.4 Lambda (anonymous) functions\nOccasionally we only need a small, throw‑away function—say, as a callback or key in a sort operation. Python’s lambda syntax lets us declare such anonymous functions in a single line, without the ceremony of def.\n\n\nsquare_lambda = lambda x: x * x\nprint(square_lambda(5))\n\n25\n\n\n\n\n\n2.6.5 Complex numbers\nPython has built‑in support for complex numbers, which are represented as a + bj, where a is the real part and b is the imaginary part. This is particularly useful in quantum mechanics, where complex numbers are ubiquitous.\n\n\nz = 1 + 2j\nprint(f'Complex number: {z}')\nprint(f'Real part: {z.real}')\nprint(f'Magnitude: {abs(z)}')\n\nComplex number: (1+2j)\nReal part: 1.0\nMagnitude: 2.23606797749979\n\n\n\n\n\n2.6.6 Why plain Python lists can be slow\nPython lists store references to arbitrary Python objects. Each element carries its own type information and reference count. When you perform arithmetic on list elements, the interpreter must\n\nLook up the byte‑code for each operation.\nResolve types at runtime.\nDispatch to the correct C implementation.\n\nThis per‑element overhead dominates runtime in numerical workloads.\n\n\n2.6.7 Enter numpy\nTo overcome the performance limits of pure‑Python lists, we turn to NumPy, which stores data in contiguous, fixed‑type arrays and dispatches mathematical operations to highly‑optimised C (and often SIMD/GPU) kernels. The example below shows how you can express a million‑element computation in just two vectorised lines.\nnumpy provides fixed‑type, contiguous arrays backed by efficient C (or SIMD/GPU) loops. Operations are dispatched once for the whole array, eliminating Python‑level overhead and unlocking BLAS/LAPACK acceleration.\nAs an example, we can compute the sum of all the elements of a python list, comparing the performance with a numpy array.\n\n\nimport numpy as np\nimport time # Only for benchmarking\n\nmy_list = [i / 1_000_000 for i in range(1_000_000)]\n\nstart = time.time() # start timer\nsum_list = sum(my_list)  # sum using Python list\nend = time.time()  # end timer\nprint(f'Sum using list: {sum_list}, '\n      f'Time taken: {1e3*(end - start):.4f} milliseconds')\n\nmy_list_numpy = np.array(my_list)\nstart = time.time()  # start timer\nsum_numpy = np.sum(my_list_numpy)  # sum using numpy array\nend = time.time()  # end timer\nprint(f'Sum using numpy: {sum_numpy}, '\n      f'Time taken: {1e3*(end - start):.4f} milliseconds')\n\nSum using list: 499999.50000000006, Time taken: 2.3680 milliseconds\nSum using numpy: 499999.5, Time taken: 0.2820 milliseconds\n\n\n\nNumPy is also able to perform vectorized operations, which let us express complex computations in a few lines of code. For example, we can compute a function of all elements in an array without writing explicit loops. This is not only more readable but also significantly faster, as the underlying C code can be optimised for performance.\n\n\n# Vectorized array operations\nx = np.linspace(0, 100, 1_000_000)\ny = np.sin(x) + 0.5 * x**2\nprint(y[:5])  # show first five results\n\n[0.         0.00010001 0.00020002 0.00030005 0.00040008]\n\n\n\nOne line performs a million floating‑point operations in compiled code—often orders of magnitude faster than an explicit Python loop.\n\n\n\n\nJohansson, J. R., P. D. Nation, and Franco Nori. 2012. “QuTiP: An open-source Python framework for the dynamics of open quantum systems.” Computer Physics Communications 183 (8): 1760–72. https://doi.org/10.1016/j.cpc.2012.02.021.\n\n\nLambert, Neill, Eric Giguère, Paul Menczel, Boxi Li, Patrick Hopf, Gerardo Suárez, Marc Gali, et al. 2024. “QuTiP 5: The Quantum Toolbox in Python.” arXiv:2412.04705. https://arxiv.org/abs/2412.04705.\n\n\nMercurio, Alberto, Yi-Te Huang, Li-Xun Cai, Yueh-Nan Chen, Vincenzo Savona, and Franco Nori. 2025. “QuantumToolbox.jl: An Efficient Julia Framework for Simulating Open Quantum Systems.” arXiv Preprint arXiv:2504.21440. https://doi.org/10.48550/arXiv.2504.21440.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "bibliography.html",
    "href": "bibliography.html",
    "title": "Bibliography",
    "section": "",
    "text": "Johansson, J. R., P. D. Nation, and Franco Nori. 2012. “QuTiP: An open-source Python framework for the dynamics\nof open quantum systems.” Computer Physics\nCommunications 183 (8): 1760–72. https://doi.org/10.1016/j.cpc.2012.02.021.\n\n\nLambert, Neill, Eric Giguère, Paul Menczel, Boxi Li, Patrick Hopf,\nGerardo Suárez, Marc Gali, et al. 2024. “QuTiP 5: The Quantum Toolbox in Python.”\narXiv:2412.04705. https://arxiv.org/abs/2412.04705.\n\n\nMercurio, Alberto, Yi-Te Huang, Li-Xun Cai, Yueh-Nan Chen, Vincenzo\nSavona, and Franco Nori. 2025. “QuantumToolbox.jl: An Efficient Julia\nFramework for Simulating Open Quantum Systems.” arXiv\nPreprint arXiv:2504.21440. https://doi.org/10.48550/arXiv.2504.21440.",
    "crumbs": [
      "Bibliography"
    ]
  }
]